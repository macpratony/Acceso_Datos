/*
 * Cuenta.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Wed Mar 03 13:26:56 2021
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package banco;

import com.matisse.reflect.*;

/**
 * <code>Cuenta</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class Cuenta extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Wed Mar 03 13:26:56 2021
     */

    /*
     * Class variables and methods
     */

    /** Class <code>Cuenta</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("banco.Cuenta"));

    /**
     * Gets the <code>Cuenta</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public Cuenta(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected Cuenta(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(Cuenta.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, Cuenta.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(Cuenta.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, Cuenta.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'id' */

    /** Attribute <code>id</code> cache ID */
    private static int idCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("id",CID));

    /**
     * Gets the <code>id</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getIdAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(idCID);
    }


    /**
     * Gets the <code>id</code> attribute value.
     * @return the value
     *
     * @see #setId
     * @see #removeId
     */
    public final String getId() {
        return getString(getIdAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>id</code> attribute value.
     * @param val the new value
     *
     * @see #getId
     * @see #removeId
     */
    public final void setId(String val) {
        setString(getIdAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>id</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getId
     * @see #setId
     */
    public final void removeId() {
        removeValue(getIdAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getId
     * @see #setId
     */
    public final boolean isIdDefaultValue() {
        return isDefaultValue(getIdAttribute(getMtDatabase()));
    }


    /* Attribute 'nombre' */

    /** Attribute <code>nombre</code> cache ID */
    private static int nombreCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("nombre",CID));

    /**
     * Gets the <code>nombre</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getNombreAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(nombreCID);
    }


    /**
     * Gets the <code>nombre</code> attribute value.
     * @return the value
     *
     * @see #setNombre
     * @see #removeNombre
     */
    public final String getNombre() {
        return getString(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>nombre</code> attribute value.
     * @param val the new value
     *
     * @see #getNombre
     * @see #removeNombre
     */
    public final void setNombre(String val) {
        setString(getNombreAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>nombre</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final void removeNombre() {
        removeValue(getNombreAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getNombre
     * @see #setNombre
     */
    public final boolean isNombreDefaultValue() {
        return isDefaultValue(getNombreAttribute(getMtDatabase()));
    }


    /* Attribute 'saldo' */

    /** Attribute <code>saldo</code> cache ID */
    private static int saldoCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("saldo",CID));

    /**
     * Gets the <code>saldo</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getSaldoAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(saldoCID);
    }


    /**
     * Gets the <code>saldo</code> attribute value.
     * @return the value
     *
     * @see #setSaldo
     * @see #removeSaldo
     */
    public final float getSaldo() {
        return getFloat(getSaldoAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>saldo</code> attribute value.
     * @param val the new value
     *
     * @see #getSaldo
     * @see #removeSaldo
     */
    public final void setSaldo(float val) {
        setFloat(getSaldoAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>saldo</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getSaldo
     * @see #setSaldo
     */
    public final void removeSaldo() {
        removeValue(getSaldoAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getSaldo
     * @see #setSaldo
     */
    public final boolean isSaldoDefaultValue() {
        return isDefaultValue(getSaldoAttribute(getMtDatabase()));
    }


    /*
     * Relationship access methods
     */

    /* Relationship 'pertenece_a' */

    /** Relationship <code>pertenece_a</code> cache ID */
    private static int pertenece_aCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtRelationship.Loader("pertenece_a",CID));

    /**
     * Gets the <code>pertenece_a</code> relationship descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a relationship descriptor object
     */
    public static com.matisse.reflect.MtRelationship getPertenece_aRelationship(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtRelationship)db.getCachedObject(pertenece_aCID);
    }

    /**
     * Gets the <code>pertenece_a</code> sucessor object.
     * @return an object 
     *
     * @see #setPertenece_a
     * @see #clearPertenece_a
     */
    public final banco.Cliente getPertenece_a() {
        return (banco.Cliente)getSuccessor(getPertenece_aRelationship(getMtDatabase()));
    }

    /**
     * Sets the <code>pertenece_a</code> successor object. It is not necessary to clear the
     * relationship before setting a new successor.
     * @param succ the new successor object
     *
     * @see #getPertenece_a
     * @see #clearPertenece_a
     */
    public final void setPertenece_a(banco.Cliente succ) {
        setSuccessor(getPertenece_aRelationship(getMtDatabase()), succ);
    }

    /**
     * Removes all <code>pertenece_a</code> successors.  When the minimum cardinality
     * is 1, a new successor must be set before commit.
     */
    public final void clearPertenece_a() {
        clearSuccessors(getPertenece_aRelationship(getMtDatabase()));
    }


    /*
     * Index access methods
     */

    /* Index 'Cuenta_pk' */

    /** Index <code>Cuenta_pk</code> cache ID */
    private static int cuenta_pkIndexCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtIndex.Loader("banco.Cuenta_pk"));

    /**
     * Gets the <code>Cuenta_pk</code> index descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return an index descriptor object
     */
    public static com.matisse.reflect.MtIndex getCuenta_pkIndex(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtIndex)db.getCachedObject(cuenta_pkIndexCID);
    }

    /**
     * Finds one <code>Cuenta</code> object in index <code>Cuenta_pk</code>.
     * @param db a database
     * @param id search parameter
     * @return the matching <code>Cuenta</code> object or <code>null</code> if none was found
     */
    public static Cuenta lookupCuenta_pk(com.matisse.MtDatabase db, String id) {
        return (Cuenta)getCuenta_pkIndex(db).lookup(new Object[] {id}, getClass(db));
    }

    /**
     * Finds <code>Cuenta</code> objects in index <code>Cuenta_pk</code>.
     * @param db a database
     * @param id search parameter
     * @return the matching <code>Cuenta</code> objects or an empty array if none was found
     */
    public static Cuenta[] lookupObjectsCuenta_pk(com.matisse.MtDatabase db, String id) {
        return (Cuenta[])getCuenta_pkIndex(db).lookupObjects(new Object[] {id}, getClass(db), Cuenta.class);
    }

    /**
     * Opens an iterator on index <code>Cuenta_pk</code> for class <code>Cuenta</code>.
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromId search parameter
     * @param toId search parameter
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> cuenta_pkIterator(com.matisse.MtDatabase db, String fromId, String toId) {
        return getCuenta_pkIndex(db).<E>iterator(new Object[] {fromId}, new Object[] {toId}, getClass(db), com.matisse.reflect.MtIndex.DIRECT, com.matisse.MtDatabase.MAX_PREFETCHING, Cuenta.class);
    }

    /**
     * Opens an iterator on index <code>Cuenta_pk</code> for class <code>Cuenta</code>. 
     * Each indexed attribute has a pair of "from" and "to" parameters which
     * define the search range for that attribute.  With strings, you may use
     * <code>null</code> to start "from" at the beginning or extend "to" to the end.
     * @param <E> a MtObject class     * @param db a database
     * @param fromId search parameter
     * @param toId search parameter
     * @param filterClass a subclass; use <code>null</code> not to restrict iterator to a subclass
     * @param direction MtIndex.DIRECT or MtIndex.REVERSE
     * @param numObjPerBuffer maximum number of objects to be retrieved in each request to server
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> cuenta_pkIterator(com.matisse.MtDatabase db, String fromId, String toId, com.matisse.reflect.MtClass filterClass, int direction, int numObjPerBuffer) {
        return getCuenta_pkIndex(db).iterator(new Object[] {fromId}, new Object[] {toId}, filterClass, direction, numObjPerBuffer, Cuenta.class);
    }

    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public Cuenta(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[Cuenta]";
    }
}
